const r=()=>{const t=["up","down","left","right"];return t[Math.floor(Math.random()*t.length)]};Rune.initLogic({minPlayers:1,maxPlayers:4,setup:t=>{const e={},n={},o={},i={};for(const s of t)e[s]=0,n[s]=r(),o[s]=10,i[s]=Rune.gameTimeInSeconds();return{session:Math.round(Math.random()*1e9),scores:e,roundStartAt:i,animation:"idle",gameOver:!1,timeLeft:10,playerIds:t,songNumber:Math.ceil(Math.random()*4),fail:!1,prompts:n,time:o}},actions:{handleClick:({direction:t,player:e},{game:n,playerId:o})=>{t===n.prompts[o]?(n.scores[e]=n.scores[o]+10,n.prompts[e]=r(),n.roundStartAt[e]=Rune.gameTimeInSeconds(),n.time[e]=10,n.fail=!1):(n.gameOver=!0,n.fail=!0,Rune.gameOver({players:n.scores}))}},update:({game:t,allPlayerIds:e})=>{for(let n=0;n<e.length;n++)10-(Rune.gameTimeInSeconds()-t.roundStartAt[e[n]])===0?(t.gameOver=!0,Rune.gameOver({players:t.scores})):t.time[e[n]]=10-(Rune.gameTimeInSeconds()-t.roundStartAt[e[n]])},events:{playerJoined:(t,{game:e})=>{e.scores[t]=0,e.time[t]=10,e.roundStartAt[t]=Rune.gameTimeInSeconds(),e.prompts[t]=r(),e.playerIds.push(t)},playerLeft(){}}});
